{"ast":null,"code":"import _objectSpread from \"/Users/Kim/Desktop/todolist5/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/Kim/Desktop/todolist5/client/src/components/todo/_index.jsx\";\nimport React, { Component } from 'react';\nimport Cursor from './cursor/_index';\nimport Line from './line/_index';\nimport { removeWord } from './commands/removeWord';\nimport { x } from './commands/x';\nimport { deleteRow } from './commands/deleteRow';\nimport { Tab } from './commands/tab';\nimport { Backspace } from './commands/backspace';\nimport { replaceCharacter } from './commands/replaceCharacter';\nimport util_tag from './tags/tag';\nimport { listStorage } from './storage/list';\nimport { getFinishedTasks } from './tags/getFinishedTags';\nimport { sortByDoneAscending } from './util/sort'; // windows\n\nimport RowWindow from './windows/popups/rowWindow';\nimport Hotkey from './windows/popups/hotkeys';\nimport JumpBox from './jumpBox';\nimport { scrolling } from './util/scrolling';\nimport DocumentStyle from './documentStyle';\nimport PrintRows from './printRows';\n\nclass Todo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.keyDowns = {\n      shift: false,\n      ctrl: false,\n      alt: false,\n      meta: false,\n      space: false\n    };\n    this.commandString = \"\";\n    this.history = [];\n    this.disableCommands = false;\n    this.jumpBox = {\n      skipSearch: false,\n      next: false,\n      jumpTo: '',\n      oldSearch: ''\n    };\n    this.lineCopy = 0;\n    this.state = {\n      cursor: {\n        xPos: 0,\n        yPos: 0,\n        length: 1,\n        savePos: 0,\n        insertAfter: true,\n        insertMode: false\n      },\n      displayHotKeyWindow: false,\n      displayTagWindow: false,\n      //need to change the name of this function.\n      displayFindWindow: false,\n      list: [],\n      finishedTasks: []\n    };\n\n    this.UNSAFE_componentWillMount = () => {\n      // componentDidMount = ()=>{\n      document.body.addEventListener('keydown', e => {\n        if (e.code === 'ShiftLeft') {\n          this.keyDowns.shift = true;\n        }\n\n        const key = e.key;\n        if (document.activeElement.tagName === 'INPUT') return;\n\n        if (key === 'Backspace' && document.activeElement.tagName !== 'INPUT') {\n          e.preventDefault();\n        }\n\n        if (this.state.displayRowWindow) return;\n        e.preventDefault();\n        if (this.state.displayFindWindow) return;\n\n        switch (key) {\n          case 'Shift':\n            this.keyDowns.shift = true;\n            return;\n\n          case 'Control':\n            this.keyDowns.ctrl = true;\n            return;\n\n          case 'Alt':\n            this.keyDowns.alt = true;\n            return;\n\n          case 'Meta':\n            this.keyDowns.meta = true;\n            return;\n\n          default:\n            break;\n        } //prevents the user from tabbing outside and allows for tabs in the text.\n\n\n        if (key === 'Tab') {\n          e.preventDefault();\n        }\n\n        if (this.state.displayTagWindow) {\n          let task = util_tag.tagEvent(this.list.get(false), e);\n\n          if (task) {\n            this.list.set(task);\n          }\n\n          const displayTagWindow = !this.state.displayTagWindow;\n          this.setState({\n            displayTagWindow\n          });\n        }\n\n        const cursor = this.cursor.get();\n\n        if (cursor.insertMode) {\n          this.insideMode(e);\n          return;\n        }\n\n        if (!cursor.insertMode) {\n          if (this.vimCommands(e)) return;\n          if (this.insertCommand(e)) return;\n        }\n\n        if (this.disableCommands === true) return; // Tag generating functionality need to fix this part a bit better\n\n        let list = util_tag.tagEvent(this.list.get(false), e);\n\n        if (list) {\n          this.list.set(list);\n          const displayTagWindow = this.state.displayTagWindow;\n          this.setState({\n            displayTagWindow\n          });\n          return;\n        }\n      });\n      document.body.addEventListener('keyup', e => {\n        if (e.code === 'ShiftLeft') {\n          this.keyDowns.shift = false;\n        }\n\n        if (e.code === 'Space') {\n          scrolling.set = false;\n        }\n      });\n    };\n\n    this.cursor = {\n      set: (nCursor, obj = null) => {\n        let oldCursor = this.cursor.get();\n\n        const cursor = _objectSpread({}, oldCursor, {}, nCursor);\n\n        this.setState({\n          cursor\n        });\n        localStorage.setItem('cursor', JSON.stringify(cursor));\n      },\n      get: () => {\n        return this.state.cursor;\n      }\n    };\n    this.list = {\n      set: (listItems, cursor = null) => {\n        let list = null;\n\n        if (!Array.isArray(listItems)) {\n          list = this.list.get();\n          list[this.cursor.get().yPos] = listItems;\n        } else {\n          list = [...listItems];\n        }\n\n        if (!cursor) this.setState({\n          list\n        });else this.setState({\n          list,\n          cursor\n        });\n        localStorage.setItem('todolist', JSON.stringify(list));\n      },\n      get: (fullList = true) => {\n        return fullList ? this.state.list : this.state.list[this.cursor.get().yPos];\n      }\n    };\n\n    this.componentDidMount = () => {\n      const list = listStorage();\n      this.list.set(list);\n      const cursor = Cursor.storage();\n      this.cursor.set(cursor);\n    };\n\n    this.insideMode = e => {\n      if (this.disableCommands) {\n        return;\n      }\n\n      const key = e.key;\n\n      switch (e.code) {\n        case 'Shift':\n        case 'Control':\n        case 'Meta':\n          return;\n\n        default:\n      }\n\n      switch (key) {\n        case 'ArrowUp':\n          this.moveCursor('up');\n          return;\n\n        case 'ArrowDown':\n          this.moveCursor('down');\n          return;\n\n        default:\n      }\n\n      let list = this.list.get();\n      let cursor = this.cursor.get();\n\n      if (key === 'Enter') {\n        const _Line$enter = Line.enter(list, cursor),\n              cursor2 = _Line$enter.cursor,\n              list2 = _Line$enter.list;\n\n        this.list.set(list2, cursor2);\n        return;\n      }\n\n      if (key === 'Escape') {\n        cursor = Cursor.withinBounds(list, cursor);\n        cursor.insertMode = false;\n        this.cursor.set(cursor);\n        return;\n      }\n\n      if (key === 'Tab') {\n        const _Tab = Tab(this.list.get(false), cursor),\n              listItem = _Tab.listItem,\n              cursor2 = _Tab.cursor;\n\n        this.list.set(listItem, cursor2);\n        return;\n      }\n\n      if (key === 'Backspace') {\n        const _Backspace = Backspace(this.list.get(), cursor),\n              list = _Backspace.list,\n              cursor2 = _Backspace.cursor;\n\n        this.list.set(list, cursor2);\n        return;\n      }\n\n      let currentItem = this.list.get(false);\n      let text = currentItem.text;\n      let row = text;\n\n      if (key === 'ArrowLeft') {\n        if (this.cursor.get().xPos === 0) {\n          cursor.insertAfter = false;\n          this.cursor.set(cursor);\n          return;\n        }\n\n        this.moveCursor('left');\n        return;\n      }\n\n      if (key === 'ArrowRight') {\n        if (this.cursor.get().xPos === row.length - 1) {\n          cursor.insertAfter = true;\n          this.cursor.set(cursor);\n          return;\n        }\n\n        this.moveCursor('right');\n        return;\n      }\n\n      if (!cursor.insertAfter) {\n        text = text.slice(0, this.cursor.get().xPos) + e.key + text.slice(this.cursor.get().xPos);\n      } else {\n        text = text.slice(0, this.cursor.get().xPos + 1) + e.key + text.slice(this.cursor.get().xPos + 1);\n      }\n\n      currentItem.text = text;\n      const cursor2 = Cursor.moveRight(currentItem, cursor);\n      this.list.set(currentItem, cursor2);\n    };\n\n    this.moveCursor = command => {\n      let cursor = this.cursor.get();\n      const list = this.list.get();\n      const listItem = list[cursor.yPos];\n\n      switch (command) {\n        case 'up':\n          cursor = Cursor.moveUp(list, cursor);\n          break;\n\n        case 'left':\n          cursor = Cursor.moveLeft(cursor);\n          break;\n\n        case 'right':\n          cursor = Cursor.moveRight(listItem, cursor);\n          break;\n\n        case 'down':\n          cursor = Cursor.moveDown(list, cursor);\n          break;\n\n        case 'begOfNextWord':\n          cursor = Cursor.begOfNextWord(list, cursor);\n          break;\n\n        case 'begOfPrevWord':\n          cursor = Cursor.begOfPrevWord(list, cursor);\n          break;\n\n        case 'endOfNextWord':\n          cursor = Cursor.endOfNextWord(list, cursor);\n          break;\n\n        case 'endOfPrevWord':\n          cursor = Cursor.endOfPrevWord(list, cursor);\n          break;\n\n        default:\n      }\n\n      this.cursor.set(cursor);\n    };\n\n    this.saveHistory = (listArr, cursorobj) => {\n      const list = [...listArr];\n\n      const cursor = _objectSpread({}, cursorobj);\n\n      this.history.push({\n        list,\n        cursor\n      });\n    };\n\n    this.commandIterations = 1;\n\n    this.vimCommands = e => {\n      const key = e.key;\n\n      if (this.disableCommands) {\n        if (this.advancedVimCommands(e)) {\n          setTimeout(() => {\n            this.disableCommands = false;\n            this.commandString = '';\n          }, 50);\n        }\n\n        return;\n      }\n\n      e.preventDefault();\n\n      if (!isNaN(e.key)) {\n        let nr = parseInt(e.key);\n\n        if (nr > 0 && nr < 9) {\n          this.commandIterations = parseInt(e.key);\n          return;\n        }\n      }\n\n      if (e.code === 'Space') {\n        scrolling.init(this.keyDowns);\n        return;\n      }\n\n      let iterations = this.commandIterations;\n      this.commandIterations = 1;\n      let cursor = this.cursor.get();\n      let list = this.list.get();\n\n      for (let i = 0; i < iterations; i++) {\n        let lastIteration = i === iterations - 1 ? true : false;\n        let firstIteration = i === 0 ? true : false;\n\n        switch (key) {\n          case 'w':\n            this.moveCursor('begOfNextWord');\n            continue;\n\n          case 'W':\n            this.moveCursor('begOfPrevWord');\n            continue;\n\n          case 'E':\n            this.moveCursor('endOfPrevWord');\n            continue;\n\n          case 'e':\n            this.moveCursor('endOfNextWord');\n            continue;\n\n          case 'ArrowUp':\n            window.scrollBy({\n              top: -110,\n              left: 0,\n              behavior: 'smooth'\n            });\n            return;\n\n          case 'ArrowDown':\n            window.scrollBy({\n              top: 110,\n              left: 0,\n              behavior: 'smooth'\n            });\n            return;\n\n          case 'k':\n            e.preventDefault();\n            this.moveCursor('up');\n            continue;\n\n          case 'j':\n            e.preventDefault();\n            this.moveCursor('down');\n            continue;\n\n          case 'h':\n          case 'ArrowLeft':\n            this.moveCursor('left');\n            continue;\n\n          case 'l':\n          case 'ArrowRight':\n            this.moveCursor('right');\n            continue;\n\n          default:\n            ;\n        }\n\n        if (key === 'n' || key === 'm') {\n          this.jumpBox.skipSearch = true;\n          this.jumpBox.next = key === 'n' ? true : false;\n          const displayFindWindow = true;\n          this.setState({\n            displayFindWindow\n          });\n          return;\n        }\n\n        if (key === 'Z') {\n          let displayHotKeyWindow = this.state.displayHotKeyWindow;\n\n          if (!displayHotKeyWindow) {\n            displayHotKeyWindow = !displayHotKeyWindow;\n            this.setState({\n              displayHotKeyWindow\n            });\n          }\n\n          return;\n        } //allows you to use multiply character commands with the character d and c \n\n\n        if (key === 'd' || key === 'c' || key === 'r') {\n          this.disableCommands = true;\n          this.advancedVimCommands(e);\n        }\n\n        if (key === '9') {\n          cursor = Cursor.endOfTheLine(this.list.get(false), cursor);\n          this.cursor.set(cursor);\n          return true;\n        }\n\n        if (key === 'X') {\n          if (firstIteration) this.saveHistory(list, cursor);\n\n          const _deleteRow = deleteRow(list, cursor),\n                list2 = _deleteRow.list,\n                cursor2 = _deleteRow.cursor;\n\n          this.list.set(list2, cursor2);\n          if (lastIteration) return true;\n          continue;\n        }\n\n        if (key === 'U') {\n          if (this.history.length === 0) return;\n          let history = this.history.pop();\n          this.list.set(history.list, history.cursor);\n          return true;\n        }\n\n        if (key === 'p') {\n          if (this.lineCopy === 0) return;\n          list.splice(cursor.yPos, 0, this.lineCopy);\n          this.lineCopy = JSON.parse(JSON.stringify(this.lineCopy));\n          this.list.set(list);\n          if (lastIteration) return true;\n          continue;\n        }\n\n        if (key === 'x') {\n          const _x = x(this.list.get(false), cursor),\n                listItem = _x.listItem,\n                cursor2 = _x.cursor;\n\n          this.list.set(listItem, cursor2);\n          return true;\n        }\n\n        if (key === '0') {\n          cursor = Cursor.begOfTheLine(cursor);\n          this.cursor.set(cursor);\n          return true;\n        }\n\n        if (key === '>') {\n          if (firstIteration) this.saveHistory(list, cursor);\n\n          const _Line$shiftRight = Line.shiftRight(this.list.get(false), cursor),\n                listItem = _Line$shiftRight.listItem,\n                cursor2 = _Line$shiftRight.cursor;\n\n          this.list.set(listItem, cursor2);\n          if (lastIteration) return true;\n          continue;\n        }\n\n        if (key === '<') {\n          if (firstIteration) this.saveHistory(list, cursor);\n\n          const _Line$shiftLeft = Line.shiftLeft(this.list.get(false), cursor),\n                listItem = _Line$shiftLeft.listItem,\n                cursor2 = _Line$shiftLeft.cursor;\n\n          this.list.set(listItem, cursor2);\n          if (lastIteration) return true;\n          continue;\n        }\n\n        if (key === 'O') {\n          if (firstIteration) this.saveHistory(list, cursor);\n          if (cursor.insertMode) return;\n\n          const _Line$above = Line.above(this.list.get(), cursor),\n                list2 = _Line$above.list;\n\n          this.list.set(list2);\n\n          if (lastIteration) {\n            cursor.insertAfter = true;\n            cursor.insertMode = true;\n            this.cursor.set(cursor);\n            return true;\n          }\n\n          if (lastIteration) return true;\n          continue;\n        }\n\n        if (key === 'o') {\n          if (firstIteration) this.saveHistory(list, cursor); // if( this.state.insertMode ) return;\n\n          if (cursor.insertMode) return;\n\n          const _Line$below = Line.below(list, cursor),\n                list2 = _Line$below.list,\n                cursor2 = _Line$below.cursor;\n\n          this.list.set(list2, cursor2);\n\n          if (lastIteration) {\n            cursor.insertAfter = true;\n            cursor.insertMode = true;\n            this.cursor.set(cursor);\n          }\n\n          if (lastIteration) return true;\n          continue;\n        } // if( key === 't'){ const displayTagWindow = !this.state.displayTagWindow; this.setState({ displayTagWindow }) return; }\n\n\n        if (key === 'Enter') {\n          if (firstIteration) this.saveHistory(list, cursor);\n\n          const _Line$below2 = Line.below(list, cursor),\n                list2 = _Line$below2.list,\n                cursor2 = _Line$below2.cursor;\n\n          this.list.set(list2, cursor2);\n          if (lastIteration) return true;\n          continue;\n        } // Move line and focus up 1 row.\n\n\n        if (key === '˚' || key === 'ArrowUp' && this.keyDowns.alt === true) {\n          const _Line$shiftUp = Line.shiftUp(list, cursor),\n                list2 = _Line$shiftUp.list,\n                cursor2 = _Line$shiftUp.cursor;\n\n          this.list.set(list2, cursor2);\n          if (lastIteration) return true;\n          continue;\n        } // Move line and focus down 1 row.\n\n\n        if (key === '∆' || key === 'ArrowDown' && this.keyDowns.alt === true) {\n          const _Line$shiftDown = Line.shiftDown(list, cursor),\n                list2 = _Line$shiftDown.list,\n                cursor2 = _Line$shiftDown.cursor;\n\n          this.list.set(list2, cursor2);\n          if (lastIteration) return true;\n          continue;\n        }\n\n        if (key === '/' || key === '?') {\n          const displayFindWindow = !this.state.displayFindWindow;\n          this.jumpBox.skipSearch = false;\n          this.jumpBox.next = key === '/' ? true : false;\n          this.setState({\n            displayFindWindow\n          });\n          return true;\n        }\n\n        if (key === '§') {}\n\n        if (key === '1') {\n          const list = JSON.parse(localStorage.getItem('backup_list'));\n          this.setState({\n            list\n          });\n          return true; // if( lastIteration ) return true;\n        }\n\n        if (key === 'q') {\n          const _getFinishedTasks = getFinishedTasks(list),\n                nList = _getFinishedTasks.nList,\n                rest = _getFinishedTasks.rest;\n\n          this.list.set(rest);\n          let finishedTasks = localStorage.getItem('finishedTasks');\n          if (finishedTasks) finishedTasks = JSON.parse(finishedTasks);else finishedTasks = [];\n          finishedTasks = [...nList, ...finishedTasks];\n          finishedTasks = sortByDoneAscending(finishedTasks);\n          localStorage.setItem('finishedTasks', JSON.stringify(finishedTasks));\n          cursor = Cursor.withinBounds(rest, cursor);\n          this.cursor.set(cursor);\n          window.location.reload(true);\n        }\n\n        if (key === 'd') {\n          let item = this.list.get(false);\n          if (item.rowStyle.hasOwnProperty('textDecoration')) delete item.rowStyle.textDecoration;else item.rowStyle = _objectSpread({}, item.rowStyle, {}, {\n            textDecoration: 'line-through'\n          });\n          this.list.set(item);\n        }\n\n        if (key === 'g') {\n          const displayRowWindow = !this.state.displayRowWindow;\n          this.setState({\n            displayRowWindow\n          });\n        }\n      } //end of the loop\n\n\n      return false;\n    };\n\n    this.advancedVimCommands = e => {\n      if (e.key.length > 1) {\n        this.disableCommands = false;\n        this.commandString = '';\n        return true;\n      }\n\n      this.commandString += e.key;\n      let cursor = this.cursor.get();\n      let list = this.list.get();\n      let listItem = this.list.get(false);\n      let text = listItem.text;\n\n      if (this.commandString.startsWith('r') && this.commandString.length > 1) {\n        let item = replaceCharacter(listItem, cursor, this.commandString[1]);\n        this.list.set(item);\n        return true;\n      }\n\n      if (this.commandString === 'caw' || this.commandString === 'dw') {\n        const _removeWord = removeWord(listItem, cursor),\n              list = _removeWord.listItem,\n              cursor2 = _removeWord.cursor;\n\n        const insertMode = true; // this.setState({insertMode});\n\n        cursor2.insertMode = insertMode;\n        this.list.set(list, cursor2);\n        return true;\n      }\n\n      if (this.commandString === 'dd') {\n        let listItem = this.list.get(false);\n        this.lineCopy = JSON.parse(JSON.stringify(listItem));\n\n        const _deleteRow2 = deleteRow(list, cursor),\n              list2 = _deleteRow2.list,\n              cursor2 = _deleteRow2.cursor;\n\n        this.list.set(list2, cursor2);\n        return true;\n      }\n\n      if (this.commandString === 'dt') {\n        listItem.text = '';\n        cursor.xPos = 0;\n        this.list.set(listItem, cursor);\n        return true;\n      }\n\n      if (this.commandString === 'dE') {\n        text = text.substring(0, cursor.xPos);\n        listItem.text = text;\n        this.list.set(listItem, cursor);\n        return true;\n      }\n\n      if (this.commandString === 'dB') {\n        text = text.substring(cursor.xPos);\n        listItem.text = text;\n        cursor.xPos = 0;\n        this.list.set(listItem, cursor);\n        return true;\n      }\n\n      if (this.commandString === 'de') {\n        let text1 = text.substring(cursor.xPos);\n        let spacePos = text1.indexOf(' ') + text.substring(0, cursor.xPos).length;\n        let newtext = text.substring(0, cursor.xPos) + text.substring(spacePos);\n        listItem.text = newtext;\n        this.list.set(listItem, cursor);\n        return true;\n      }\n\n      if (this.commandString === 'db') {\n        let text1 = text.substring(0, cursor.xPos);\n        let pos = text1.lastIndexOf(' ');\n        let newtext = text.substring(0, pos + 1) + text.substring(cursor.xPos);\n        const diff = text.length - newtext.length;\n        cursor.xPos -= diff;\n        listItem.text = newtext;\n        this.list.set(listItem, cursor);\n        return true;\n      }\n\n      if (this.commandString === 'cc') {\n        this.lineCopy = JSON.parse(JSON.stringify(listItem));\n        return true;\n      }\n\n      let match = false;\n      ['cc', 'db', 'de', 'dB', 'dE', 'dd', 'caw', 'dw'].forEach(command => {\n        if (command.startsWith(this.commandString)) match = true;\n      });\n      if (!match) return true;\n      return false;\n    };\n\n    this.insertCommand = e => {\n      if (this.disableCommands) {\n        return;\n      }\n\n      const key = e.key;\n      e.preventDefault();\n      const list = this.list.get();\n      let cursor = this.cursor.get();\n      const listItem = list[cursor.yPos];\n\n      if (key === 'I') {\n        this.saveHistory(list, cursor);\n        cursor = Cursor.begOfTheLine(cursor);\n        cursor.insertAfter = listItem.text.length > 0 ? false : true;\n        cursor.insertMode = true;\n        this.cursor.set(cursor);\n        return true;\n      }\n\n      if (key === 'i') {\n        this.saveHistory(list, cursor);\n        cursor.insertAfter = listItem.text.length > 0 ? false : true;\n        cursor.insertMode = true;\n        this.cursor.set(cursor);\n        return true;\n      }\n\n      if (key === 'A') {\n        cursor = Cursor.endOfTheLine(listItem, cursor);\n        cursor.insertAfter = true;\n        cursor.insertMode = true;\n        this.cursor.set(cursor);\n        this.saveHistory(list, cursor);\n        return true;\n      }\n\n      if (key === 'a') {\n        this.saveHistory(list, cursor);\n        cursor.insertAfter = true;\n        cursor.insertMode = true;\n        this.cursor.set(cursor);\n        return true;\n      }\n\n      return false;\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(DocumentStyle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, React.createElement(PrintRows, {\n      onClick: cursor => this.cursor.set(cursor),\n      data: {\n        list: this.list.get(),\n        cursor: this.cursor.get(),\n        insertMode: this.state.insertMode\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    })), this.state.displayFindWindow && React.createElement(JumpBox, {\n      onSubmit: (cursor, displayFindWindow, jumpBox) => {\n        this.setState({\n          cursor\n        });\n        this.setState({\n          displayFindWindow\n        });\n        this.jumpBox = jumpBox;\n      },\n      data: {\n        cursor: this.cursor.get(),\n        list: this.list.get(),\n        jumpBox: this.jumpBox\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }), this.state.displayRowWindow && React.createElement(RowWindow, {\n      onClose: (listItem, displayRowWindow) => {\n        this.list.set(listItem);\n        this.setState({\n          displayRowWindow\n        });\n      },\n      data: this.list.get(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }), this.state.displayHotKeyWindow && React.createElement(Hotkey, {\n      onClose: () => {\n        const displayHotKeyWindow = false;\n        this.setState({\n          displayHotKeyWindow\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Todo;","map":{"version":3,"sources":["/Users/Kim/Desktop/todolist5/client/src/components/todo/_index.jsx"],"names":["React","Component","Cursor","Line","removeWord","x","deleteRow","Tab","Backspace","replaceCharacter","util_tag","listStorage","getFinishedTasks","sortByDoneAscending","RowWindow","Hotkey","JumpBox","scrolling","DocumentStyle","PrintRows","Todo","keyDowns","shift","ctrl","alt","meta","space","commandString","history","disableCommands","jumpBox","skipSearch","next","jumpTo","oldSearch","lineCopy","state","cursor","xPos","yPos","length","savePos","insertAfter","insertMode","displayHotKeyWindow","displayTagWindow","displayFindWindow","list","finishedTasks","UNSAFE_componentWillMount","document","body","addEventListener","e","code","key","activeElement","tagName","preventDefault","displayRowWindow","task","tagEvent","get","set","setState","insideMode","vimCommands","insertCommand","nCursor","obj","oldCursor","localStorage","setItem","JSON","stringify","listItems","Array","isArray","fullList","componentDidMount","storage","moveCursor","enter","cursor2","list2","withinBounds","listItem","currentItem","text","row","slice","moveRight","command","moveUp","moveLeft","moveDown","begOfNextWord","begOfPrevWord","endOfNextWord","endOfPrevWord","saveHistory","listArr","cursorobj","push","commandIterations","advancedVimCommands","setTimeout","isNaN","nr","parseInt","init","iterations","i","lastIteration","firstIteration","window","scrollBy","top","left","behavior","endOfTheLine","pop","splice","parse","begOfTheLine","shiftRight","shiftLeft","above","below","shiftUp","shiftDown","getItem","nList","rest","location","reload","item","rowStyle","hasOwnProperty","textDecoration","startsWith","substring","text1","spacePos","indexOf","newtext","pos","lastIndexOf","diff","match","forEach","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Cursor from './cursor/_index';\nimport Line from './line/_index';\n\nimport { removeWord } from './commands/removeWord';\nimport {x} from './commands/x';\nimport {deleteRow} from './commands/deleteRow';\nimport {Tab} from './commands/tab';\nimport {Backspace} from './commands/backspace';\nimport {replaceCharacter} from './commands/replaceCharacter';\n\nimport util_tag from './tags/tag';\n\nimport {listStorage} from './storage/list';\nimport { getFinishedTasks } from './tags/getFinishedTags';\nimport {sortByDoneAscending} from './util/sort';\n\n// windows\nimport RowWindow from './windows/popups/rowWindow';\nimport Hotkey from './windows/popups/hotkeys';\nimport JumpBox from './jumpBox';\n\nimport {scrolling} from './util/scrolling';\nimport DocumentStyle from './documentStyle';\nimport PrintRows from './printRows';\n\nclass Todo extends Component {\n\n  keyDowns = { shift: false, ctrl: false, alt: false, meta: false, space: false }\n  commandString = \"\";\n  history = [];\n  disableCommands = false;\n  jumpBox = {skipSearch: false, next: false, jumpTo: '', oldSearch: ''}\n  lineCopy = 0;\n        \n  state = {\n    cursor: { xPos: 0, yPos: 0, length: 1, savePos: 0, insertAfter: true, insertMode: false, },\n    displayHotKeyWindow: false,\n    displayTagWindow: false,\n    //need to change the name of this function.\n    displayFindWindow: false,\n    list: [],\n    finishedTasks: [],\n  }\n\n  UNSAFE_componentWillMount = ()=>{\n  // componentDidMount = ()=>{\n    document.body.addEventListener( 'keydown', e=>{\n\n      if( e.code === 'ShiftLeft'){\n        this.keyDowns.shift = true;\n      }\n\n      const key = e.key;\n\n      if( document.activeElement.tagName === 'INPUT') return;\n      if( key === 'Backspace' && document.activeElement.tagName !== 'INPUT'){ e.preventDefault(); }\n\n      if( this.state.displayRowWindow ) return;\n      e.preventDefault();\n\n\n      if( this.state.displayFindWindow ) return;\n\n      switch(key){\n        case 'Shift':   this.keyDowns.shift = true; return;\n        case 'Control': this.keyDowns.ctrl = true; return;\n        case 'Alt':     this.keyDowns.alt = true; return;\n        case 'Meta':    this.keyDowns.meta = true; return;\n        default: break;\n      }\n      \n      //prevents the user from tabbing outside and allows for tabs in the text.\n      if( key === 'Tab'){ e.preventDefault(); }\n\n      if( this.state.displayTagWindow ){\n        let task = util_tag.tagEvent( this.list.get(false), e);\n        if( task ){\n          this.list.set(task);\n        }\n\n        const displayTagWindow = !this.state.displayTagWindow;\n        this.setState({ displayTagWindow })\n      }\n   \n      const cursor = this.cursor.get();\n      if( cursor.insertMode ){\n        this.insideMode(e);\n        return;\n      }\n\n      if( !cursor.insertMode ){\n        if( this.vimCommands(e) ) return;\n        if( this.insertCommand(e) ) return;\n      }\n\n      if( this.disableCommands === true) return;\n\n      // Tag generating functionality need to fix this part a bit better\n      let list = util_tag.tagEvent( this.list.get(false), e);\n      if( list ){\n        this.list.set(list);\n        const displayTagWindow = this.state.displayTagWindow;\n        this.setState({ displayTagWindow })\n        return;\n      }\n\n    });\n\n    document.body.addEventListener('keyup', e=>{\n      if( e.code === 'ShiftLeft'){\n        this.keyDowns.shift = false;\n      }\n      if( e.code === 'Space'){\n        scrolling.set = false;\n      }\n    });\n\n  }\n\n  cursor = {\n    set: ( nCursor,obj=null )=> {\n      let oldCursor = this.cursor.get();\n      const cursor = {...oldCursor, ...nCursor};\n      this.setState({cursor})\n      localStorage.setItem( 'cursor', JSON.stringify(cursor));\n    },\n\n    get: ()=> { \n      return this.state.cursor \n    }\n  }\n\n  list = {\n    set: (listItems, cursor=null) =>{\n      let list = null;\n\n      if( !Array.isArray(listItems) ){\n        list = this.list.get();\n        list[this.cursor.get().yPos] = listItems;\n      }else{\n        list = [...listItems]\n      }\n      if(!cursor)  this.setState({list});\n      else         this.setState({list, cursor});\n      localStorage.setItem('todolist', JSON.stringify(list));\n    },\n\n    get: (fullList=true)=>{\n      return fullList ? this.state.list : this.state.list[this.cursor.get().yPos];\n    }\n  }\n\n  componentDidMount = () =>{\n    const list = listStorage();\n    this.list.set(list);\n\n    const cursor = Cursor.storage();\n    this.cursor.set(cursor);\n  }\n\n  insideMode = (e)=> {\n    if( this.disableCommands ){ return; }\n    const key = e.key;\n\n    switch( e.code ){ \n      case 'Shift': case 'Control': case 'Meta': return; default:\n    }\n\n    switch(key){\n      case 'ArrowUp': this.moveCursor('up'); return;\n      case 'ArrowDown': this.moveCursor('down'); return;\n      default:\n    }\n\n    let list = this.list.get();\n    let cursor = this.cursor.get();\n\n    if( key === 'Enter'){\n      const { cursor: cursor2, list: list2 } = Line.enter( list, cursor);\n      this.list.set(list2, cursor2);\n      return;\n    }\n\n    if( key === 'Escape'){\n      cursor = Cursor.withinBounds( list, cursor );\n      cursor.insertMode = false;\n      this.cursor.set(cursor);\n      return;\n    }\n\n    if( key === 'Tab' ){\n      const {listItem, cursor:cursor2} =  Tab( this.list.get(false), cursor);\n      this.list.set(listItem, cursor2);\n      return;\n    }\n\n    if( key === 'Backspace'){\n      const {list, cursor: cursor2} = Backspace( this.list.get(), cursor)\n      this.list.set(list, cursor2);\n      return;\n    }\n\n    let currentItem = this.list.get(false);\n    let text = currentItem.text;\n\n    let row = text;\n\n    if( key === 'ArrowLeft'){ \n      if( this.cursor.get().xPos === 0){\n        cursor.insertAfter = false;\n        this.cursor.set(cursor);\n        return;\n      }\n      this.moveCursor('left'); \n      return;\n    }\n    if( key === 'ArrowRight'){\n      if( this.cursor.get().xPos === row.length -1 ){\n        cursor.insertAfter = true;\n        this.cursor.set(cursor);\n        return;\n      }\n      this.moveCursor('right'); return; \n    }\n\n    if( !cursor.insertAfter){\n      text = text.slice(0, this.cursor.get().xPos ) + e.key + text.slice(this.cursor.get().xPos );\n    } else{\n      text = text.slice(0, this.cursor.get().xPos + 1 ) + e.key + text.slice(this.cursor.get().xPos + 1);\n    }\n\n    currentItem.text = text;\n    const cursor2 = Cursor.moveRight( currentItem, cursor);\n    this.list.set(currentItem, cursor2);\n  }\n\n  moveCursor = (command)=>{ \n    let cursor = this.cursor.get();\n    const list = this.list.get();\n    const listItem = list[cursor.yPos];\n    \n    switch( command ){\n      case 'up':            cursor = Cursor.moveUp( list, cursor );break;\n      case 'left':          cursor = Cursor.moveLeft(cursor);break;\n      case 'right':         cursor = Cursor.moveRight( listItem, cursor);break;\n      case 'down':          cursor = Cursor.moveDown(list, cursor); break;\n      case 'begOfNextWord': cursor = Cursor.begOfNextWord( list, cursor ); break;\n      case 'begOfPrevWord': cursor = Cursor.begOfPrevWord( list, cursor ); break;\n      case 'endOfNextWord': cursor = Cursor.endOfNextWord( list, cursor); break;\n      case 'endOfPrevWord': cursor = Cursor.endOfPrevWord( list, cursor); break;\n      default:\n    }\n    this.cursor.set(cursor);\n  }\n\n  saveHistory = (listArr, cursorobj) =>{\n    const list = [...listArr];\n    const cursor = {...cursorobj};\n    this.history.push( {list, cursor});\n  }\n\n  commandIterations = 1;\n  vimCommands = (e) => {\n    const key = e.key;\n    if( this.disableCommands ){\n      if( this.advancedVimCommands(e)){\n        setTimeout( ()=>{\n          this.disableCommands = false;\n          this.commandString = '';\n        }, 50);\n      }\n      return;\n    }\n    e.preventDefault();\n\n    if( !isNaN( e.key)){\n      let nr = parseInt(e.key);\n      if( nr > 0 && nr < 9){\n        this.commandIterations = parseInt(e.key);\n        return;\n      }\n    }\n\n    if( e.code === 'Space' ){ \n      scrolling.init( this.keyDowns);\n      return;\n    }\n\n    let iterations = this.commandIterations;\n    this.commandIterations = 1;\n\n    let cursor = this.cursor.get();\n    let list = this.list.get();\n\n    \n    for( let i = 0; i < iterations ; i++){\n      let lastIteration = (i === iterations - 1) ? true : false;\n      let firstIteration = (i === 0) ? true : false;\n\n      switch( key ){\n        case 'w': this.moveCursor('begOfNextWord'); continue;\n        case 'W': this.moveCursor('begOfPrevWord'); continue;\n        case 'E': this.moveCursor('endOfPrevWord'); continue;\n        case 'e': this.moveCursor('endOfNextWord'); continue;\n        case 'ArrowUp':    window.scrollBy({ top: -110, left: 0, behavior: 'smooth'}); return;\n        case 'ArrowDown':  window.scrollBy({ top: 110, left: 0, behavior: 'smooth'}); return;\n        case 'k':          e.preventDefault(); this.moveCursor('up'); continue; \n        case 'j':          e.preventDefault(); this.moveCursor('down'); continue; \n        case 'h': case 'ArrowLeft': this.moveCursor('left'); continue; \n        case 'l': case 'ArrowRight': this.moveCursor('right'); continue;\n        default: ;\n      }\n\n      if( key === 'n' || key === 'm'){\n          this.jumpBox.skipSearch = true;\n          this.jumpBox.next = (key === 'n') ? true : false;\n          const displayFindWindow = true;\n          this.setState({displayFindWindow})\n          return;\n      }\n\n      if( key === 'Z'){\n        let displayHotKeyWindow = this.state.displayHotKeyWindow;\n        if( !displayHotKeyWindow){\n          displayHotKeyWindow = !displayHotKeyWindow;\n          this.setState({displayHotKeyWindow});\n        }\n        return;\n      }\n\n      //allows you to use multiply character commands with the character d and c \n      if( key === 'd' || key === 'c' || key === 'r'){\n        this.disableCommands = true;\n        this.advancedVimCommands(e);\n      }\n\n      if( key === '9'){\n        cursor = Cursor.endOfTheLine( this.list.get(false), cursor );\n        this.cursor.set(cursor);\n        return true;\n      }\n\n      if( key === 'X'){\n        if( firstIteration ) this.saveHistory(list, cursor);\n        const {list: list2, cursor:cursor2 } = deleteRow( list, cursor);\n        this.list.set(list2, cursor2);\n        if( lastIteration ) return true;\n        continue;\n      }\n      \n      if( key === 'U'){\n        if( this.history.length === 0 ) return;\n        let history = this.history.pop();\n        this.list.set(history.list, history.cursor);\n        return true;\n      }\n\n      if( key === 'p'){\n        if( this.lineCopy === 0) return;\n        list.splice( cursor.yPos, 0, this.lineCopy);\n        this.lineCopy = JSON.parse(JSON.stringify(this.lineCopy));\n        this.list.set(list);\n        if( lastIteration ) return true;\n        continue;\n      }\n\n      if( key === 'x' ){\n        const {listItem, cursor: cursor2} = x( this.list.get(false), cursor);\n        this.list.set(listItem, cursor2);\n        return true;\n      }\n\n      if( key === '0'){\n        cursor = Cursor.begOfTheLine(cursor);\n        this.cursor.set(cursor);\n        return true;\n      }\n\n      if( key === '>'){\n        if( firstIteration ) this.saveHistory(list, cursor);\n        const { listItem, cursor: cursor2 } = Line.shiftRight( this.list.get(false), cursor);\n        this.list.set(listItem, cursor2);\n        if( lastIteration ) return true;\n        continue;\n      }\n\n      if( key === '<'){\n        if( firstIteration ) this.saveHistory(list, cursor);\n        const { listItem, cursor: cursor2} = Line.shiftLeft( this.list.get(false), cursor );\n        this.list.set(listItem, cursor2);\n        if( lastIteration ) return true;\n        continue;\n      }\n\n      if( key === 'O' ){\n        if( firstIteration ) this.saveHistory(list, cursor);\n        if( cursor.insertMode ) return;\n        const {list:list2} = Line.above( this.list.get(), cursor );\n        this.list.set(list2);\n\n        if( lastIteration ){\n          cursor.insertAfter = true;\n          cursor.insertMode = true;\n          this.cursor.set(cursor);\n          return true;\n        }\n        if( lastIteration ) return true;\n        continue;\n      }\n\n      if( key === 'o'){\n        if( firstIteration ) this.saveHistory(list, cursor);\n        // if( this.state.insertMode ) return;\n        if( cursor.insertMode ) return;\n        const {list: list2, cursor:cursor2} = Line.below( list, cursor);\n        this.list.set(list2, cursor2);\n        \n        if( lastIteration ){\n          cursor.insertAfter = true;\n          cursor.insertMode = true;\n          this.cursor.set(cursor);\n        }\n        if( lastIteration ) return true;\n        continue;\n      }\n\n      // if( key === 't'){ const displayTagWindow = !this.state.displayTagWindow; this.setState({ displayTagWindow }) return; }\n\n      if( key === 'Enter'){\n        if( firstIteration ) this.saveHistory(list, cursor);\n        const {list: list2, cursor:cursor2} = Line.below( list, cursor);\n        this.list.set(list2, cursor2);\n        if( lastIteration ) return true;\n        continue;\n      }\n\n      \n      // Move line and focus up 1 row.\n      if( key === '˚' || (key === 'ArrowUp' && this.keyDowns.alt === true)){\n        const { list:list2, cursor:cursor2 } = Line.shiftUp( list, cursor);\n        this.list.set(list2, cursor2);\n        if( lastIteration ) return true;\n        continue;\n      }\n\n      // Move line and focus down 1 row.\n      if( key === '∆' || (key === 'ArrowDown' && this.keyDowns.alt === true)){\n        const { list:list2, cursor:cursor2 } = Line.shiftDown( list, cursor);\n        this.list.set(list2, cursor2);\n        if( lastIteration ) return true;\n        continue;\n      }\n\n      if( key === '/' || key === '?'){\n        const displayFindWindow = !this.state.displayFindWindow;\n        this.jumpBox.skipSearch = false;\n        this.jumpBox.next = (key === '/') ? true : false;\n        this.setState({displayFindWindow});\n        return true;\n      }\n\n      if( key === '§'){}\n\n      if( key === '1'){\n        const list = JSON.parse( localStorage.getItem('backup_list') );\n        this.setState({list});\n        return true;\n        // if( lastIteration ) return true;\n      }\n\n      if( key === 'q'){\n        const {nList, rest }= getFinishedTasks(list);\n        this.list.set(rest);\n\n        let finishedTasks = localStorage.getItem('finishedTasks')\n        if( finishedTasks ) finishedTasks = JSON.parse(finishedTasks);\n        else                finishedTasks = [];\n\n        finishedTasks = [...nList, ...finishedTasks ];\n\n        finishedTasks = sortByDoneAscending( finishedTasks );\n        localStorage.setItem('finishedTasks', JSON.stringify(finishedTasks));\n\n        cursor = Cursor.withinBounds(rest, cursor);\n        this.cursor.set(cursor);\n        window.location.reload(true);\n      }\n\n      if( key === 'd'){\n        let item = this.list.get(false);\n        if( item.rowStyle.hasOwnProperty('textDecoration')) delete item.rowStyle.textDecoration;\n        else                                                item.rowStyle = {...item.rowStyle, ...{textDecoration: 'line-through'}}\n        this.list.set(item);\n      }\n      \n      if( key === 'g'){\n        const displayRowWindow = !this.state.displayRowWindow;\n        this.setState({displayRowWindow});\n      }\n\n    }//end of the loop\n    return false;\n\n  }\n\n  advancedVimCommands= (e) =>{\n    if( e.key.length > 1){\n      this.disableCommands = false; \n      this.commandString = ''; \n      return true;\n    }\n\n    this.commandString += e.key;\n\n    let cursor = this.cursor.get();\n    let list = this.list.get();\n    let listItem = this.list.get(false);\n    let {text} = listItem;\n\n\n    if( this.commandString.startsWith('r') && this.commandString.length > 1 ){\n      let item = replaceCharacter( listItem, cursor, this.commandString[1])\n      this.list.set(item);\n      return true;\n    }\n\n    if( this.commandString === 'caw' || this.commandString === 'dw'){\n      const {listItem: list, cursor: cursor2 } = removeWord( listItem, cursor );\n      const insertMode = true;\n      // this.setState({insertMode});\n      cursor2.insertMode = insertMode;\n      this.list.set(list, cursor2);\n      return true;\n    }\n\n    if( this.commandString === 'dd'){\n      let listItem = this.list.get(false);\n      this.lineCopy = JSON.parse(JSON.stringify(listItem));\n      const {list:list2, cursor:cursor2 } = deleteRow( list, cursor );\n      this.list.set(list2, cursor2);\n      return true;\n    }\n\n    if( this.commandString === 'dt'){\n      listItem.text = '';\n      cursor.xPos = 0;\n      this.list.set(listItem, cursor);\n      return true;\n    }\n    \n    if( this.commandString === 'dE'){\n      text = text.substring(0, cursor.xPos);\n      listItem.text = text;\n      this.list.set(listItem, cursor);\n      return true;\n    }\n\n    if( this.commandString === 'dB'){\n      text = text.substring(cursor.xPos);\n      listItem.text = text;\n      cursor.xPos = 0;\n      this.list.set(listItem, cursor);\n      return true;\n    }\n\n    if( this.commandString === 'de'){\n      let text1 = text.substring(cursor.xPos);\n      let spacePos = text1.indexOf(' ') + text.substring(0, cursor.xPos).length;\n      let newtext = text.substring(0, cursor.xPos) + text.substring(spacePos);\n      listItem.text = newtext;\n      this.list.set(listItem, cursor);\n      return true;\n    }\n\n    if( this.commandString === 'db'){\n      let text1 = text.substring(0, cursor.xPos);\n      let pos = text1.lastIndexOf(' ');\n      let newtext = text.substring(0, pos + 1) + text.substring(cursor.xPos);\n      const diff = text.length - newtext.length;\n      cursor.xPos -= diff;\n      listItem.text = newtext;\n      this.list.set(listItem, cursor);\n      return true;\n    }\n\n    if( this.commandString === 'cc'){\n      this.lineCopy = JSON.parse(JSON.stringify(listItem));\n      return true;\n    }\n\n    let match = false;\n    ['cc', 'db', 'de', 'dB', 'dE', 'dd', 'caw', 'dw'].forEach( (command)=>{ \n      if( command.startsWith(this.commandString)) match = true; \n    });\n\n    if( !match) return true;\n    return false;\n  }\n\n  insertCommand = (e) => {\n    if( this.disableCommands ){ return; }\n    const key = e.key;\n    e.preventDefault();\n    const list = this.list.get();\n    let cursor = this.cursor.get();\n    const listItem = list[cursor.yPos];\n\n    if( key === 'I' ){\n      this.saveHistory(list, cursor);\n      cursor = Cursor.begOfTheLine( cursor );\n      cursor.insertAfter = (listItem.text.length > 0) ? false: true;\n      cursor.insertMode = true;\n      this.cursor.set(cursor);\n      return true;\n    }\n\n    if( key === 'i' ){\n      this.saveHistory(list, cursor);\n      cursor.insertAfter = (listItem.text.length > 0) ? false : true;\n      cursor.insertMode = true;\n      this.cursor.set(cursor);\n      return true;\n    }\n\n    if( key === 'A' ){\n      cursor = Cursor.endOfTheLine( listItem, cursor );\n      cursor.insertAfter = true; cursor.insertMode = true;\n      this.cursor.set(cursor);\n\n      this.saveHistory(list, cursor);\n      return true\n    }\n\n    if( key === 'a' ){\n      this.saveHistory(list, cursor);\n      cursor.insertAfter = true; cursor.insertMode = true;\n      this.cursor.set(cursor);\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    return (\n        <React.Fragment>\n          <DocumentStyle>\n              <PrintRows \n                onClick={ (cursor)=> this.cursor.set(cursor)}\n                data={{ list: this.list.get(), cursor: this.cursor.get(), insertMode: this.state.insertMode }} />\n          </DocumentStyle>\n\n          {this.state.displayFindWindow && <JumpBox \n            onSubmit={ (cursor, displayFindWindow, jumpBox)=>{ this.setState({cursor}); this.setState({displayFindWindow}); this.jumpBox = jumpBox;   }} \n            data={{ cursor: this.cursor.get(), list: this.list.get(), jumpBox: this.jumpBox }}\n            /> }\n\n          {this.state.displayRowWindow && <RowWindow \n            onClose={ (listItem, displayRowWindow)=>{ this.list.set(listItem); this.setState({displayRowWindow}) }} \n            data={ this.list.get(false)} />\n          }\n\n          {this.state.displayHotKeyWindow && <Hotkey \n            onClose={ ()=>{ const displayHotKeyWindow = false; this.setState({displayHotKeyWindow}); }} />}\n        </React.Fragment>\n    );\n  }\n}\n \nexport default Todo;"]},"metadata":{},"sourceType":"module"}