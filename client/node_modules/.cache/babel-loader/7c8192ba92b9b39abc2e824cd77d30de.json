{"ast":null,"code":"import _objectSpread from \"/Users/Kim/Desktop/todolist5/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nexport function jumpToPreviousMatch(list, match, cursor) {\n  cursor.savePos = -1;\n  match = match.substring(1);\n\n  let oldCursor = _objectSpread({}, cursor); // Try to find a matching string on the current row before the cursor\n\n\n  let currentRow = list[cursor.yPos].text;\n  let beforeCursor = currentRow.substring(0, cursor.xPos + 1);\n  let find = beforeCursor.lastIndexOf(match);\n\n  if (find >= 0) {\n    cursor.xPos = find;\n    return cursor;\n  } //iterates through all rows before the current row.\n\n\n  for (let listIndex = cursor.yPos - 1; listIndex >= 0; listIndex--) {\n    let text = list[listIndex].text.toLowerCase();\n    let find = text.lastIndexOf(match);\n\n    if (find >= 0) {\n      cursor.xPos = find;\n      cursor.yPos = listIndex;\n      return cursor;\n    }\n  }\n\n  return oldCursor;\n}\nexport default {\n  jumpToPreviousMatch\n};","map":{"version":3,"sources":["/Users/Kim/Desktop/todolist5/client/src/components/todo/cursor/jumpToPreviousMatch.js"],"names":["jumpToPreviousMatch","list","match","cursor","savePos","substring","oldCursor","currentRow","yPos","text","beforeCursor","xPos","find","lastIndexOf","listIndex","toLowerCase"],"mappings":";AAAA,OAAO,SAASA,mBAAT,CAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,MAA1C,EAAiD;AACtDA,EAAAA,MAAM,CAACC,OAAP,GAAiB,CAAC,CAAlB;AACAF,EAAAA,KAAK,GAAGA,KAAK,CAACG,SAAN,CAAgB,CAAhB,CAAR;;AACA,MAAIC,SAAS,qBAAOH,MAAP,CAAb,CAHsD,CAKtD;;;AACA,MAAII,UAAU,GAAGN,IAAI,CAACE,MAAM,CAACK,IAAR,CAAJ,CAAkBC,IAAnC;AACA,MAAIC,YAAY,GAAGH,UAAU,CAACF,SAAX,CAAqB,CAArB,EAAwBF,MAAM,CAACQ,IAAP,GAAc,CAAtC,CAAnB;AACA,MAAIC,IAAI,GAAGF,YAAY,CAACG,WAAb,CAA0BX,KAA1B,CAAX;;AACA,MAAIU,IAAI,IAAI,CAAZ,EAAe;AACbT,IAAAA,MAAM,CAACQ,IAAP,GAAcC,IAAd;AACA,WAAOT,MAAP;AACD,GAZqD,CActD;;;AACA,OAAK,IAAIW,SAAS,GAACX,MAAM,CAACK,IAAP,GAAc,CAAjC,EAAoCM,SAAS,IAAK,CAAlD,EAAqDA,SAAS,EAA9D,EAAiE;AAC/D,QAAIL,IAAI,GAAGR,IAAI,CAACa,SAAD,CAAJ,CAAgBL,IAAhB,CAAqBM,WAArB,EAAX;AACA,QAAIH,IAAI,GAAGH,IAAI,CAACI,WAAL,CAAkBX,KAAlB,CAAX;;AACA,QAAIU,IAAI,IAAI,CAAZ,EAAe;AACbT,MAAAA,MAAM,CAACQ,IAAP,GAAcC,IAAd;AACAT,MAAAA,MAAM,CAACK,IAAP,GAAcM,SAAd;AACA,aAAOX,MAAP;AACD;AACF;;AACD,SAAOG,SAAP;AACD;AAED,eAAe;AACbN,EAAAA;AADa,CAAf","sourcesContent":["export function jumpToPreviousMatch(list, match, cursor){\n  cursor.savePos = -1;\n  match = match.substring(1);\n  let oldCursor = {...cursor};\n\n  // Try to find a matching string on the current row before the cursor\n  let currentRow = list[cursor.yPos].text;\n  let beforeCursor = currentRow.substring(0, cursor.xPos + 1);\n  let find = beforeCursor.lastIndexOf( match );\n  if( find >= 0 ){\n    cursor.xPos = find;\n    return cursor;\n  }\n\n  //iterates through all rows before the current row.\n  for( let listIndex=cursor.yPos - 1; listIndex >=  0; listIndex--){\n    let text = list[listIndex].text.toLowerCase();\n    let find = text.lastIndexOf( match );\n    if( find >= 0 ){\n      cursor.xPos = find;\n      cursor.yPos = listIndex;\n      return cursor;\n    }\n  }\n  return oldCursor;\n}\n\nexport default {\n  jumpToPreviousMatch\n}\n"]},"metadata":{},"sourceType":"module"}