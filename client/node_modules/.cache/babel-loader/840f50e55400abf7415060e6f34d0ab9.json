{"ast":null,"code":"import _objectSpread from \"/Users/Kim/Desktop/todolist/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/Kim/Desktop/todolist/client/src/components/printRows.jsx\";\nimport React, { Component } from 'react';\nimport { styles } from './style/main';\nimport Tags1 from './tags/tags1';\nimport Tags2 from './tags/tags2';\nimport Cursor from './cursor/_index';\n\nclass PrintRow extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.onClick = index => {\n      let cursor = this.props.data.cursor;\n      cursor.yPos = index;\n      cursor = Cursor.withinBounds(this.props.data.list, cursor);\n      this.props.onClick(cursor);\n    };\n\n    this.setLineStyle = (index, listItem, props) => {\n      return index === this.props.data.cursor.yPos ? _objectSpread({}, styles.lineStyle, {}, styles.activeLine, {}, listItem.rowStyle) : _objectSpread({}, styles.lineStyle, {}, listItem.rowStyle);\n    };\n\n    this.print = (listItem, index) => {\n      let text = listItem.text;\n      const cursor = this.props.data.cursor;\n      const textBeforeCursor = text.slice(0, cursor.xPos);\n      const cursorAt = text.slice(cursor.xPos, cursor.xPos + 1);\n      const textAfterCursor = text.substring(cursor.xPos + 1);\n\n      const ifInactiveRow = () => {\n        return index !== cursor.yPos;\n      };\n\n      const getInsertRow = () => {\n        let insertMarker = listItem.rowStyle.backgroundColor !== 'black' ? {} : _objectSpread({}, styles.commandMarker, {}, {\n          backgroundColor: 'white'\n        });\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, textBeforeCursor), !cursor.insertAfter && React.createElement(\"span\", {\n          style: _objectSpread({}, styles.insertMarker, {}, insertMarker),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, cursorAt), cursor.insertAfter && React.createElement(\"span\", {\n          style: _objectSpread({}, styles.insertMarker, {}, insertMarker),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, textAfterCursor));\n      };\n\n      const getNonInsertRow = () => {\n        if (!listItem.rowStyle) return null;\n        let commandMarker = listItem.rowStyle.backgroundColor !== 'green' ? _objectSpread({}, styles.commandMarker) : _objectSpread({}, styles.commandMarker, {}, {\n          backgroundColor: 'white'\n        });\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, textBeforeCursor), listItem.text.length === 0 && React.createElement(\"span\", {\n          style: _objectSpread({}, commandMarker, {}, {\n            position: 'relative',\n            display: 'inline-block',\n            width: 4,\n            height: 13,\n            top: 3\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }), listItem.text.length !== 0 && React.createElement(\"span\", {\n          style: _objectSpread({}, commandMarker),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, text.slice(cursor.xPos, cursor.xPos + 1)), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, text.slice(cursor.xPos + 1, cursor.xPos + 1)), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, text.slice(cursor.xPos + 1, text.length)));\n      };\n\n      return React.createElement(\"div\", {\n        style: _objectSpread({}, this.setLineStyle(index, listItem)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: styles.item,\n        onClick: () => this.onClick(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: _objectSpread({}, styles.rowStyle),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Tags1, {\n        data: listItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), ifInactiveRow() && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, text), !ifInactiveRow() && cursor.insertMode && getInsertRow(), !ifInactiveRow() && !cursor.insertMode && getNonInsertRow(), React.createElement(Tags2, {\n        fullString: listItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }))));\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.props.data.list.map((listItem, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \" \", this.print(listItem, index), \" \");\n    }));\n  }\n\n}\n\nexport default PrintRow;","map":{"version":3,"sources":["/Users/Kim/Desktop/todolist/client/src/components/printRows.jsx"],"names":["React","Component","styles","Tags1","Tags2","Cursor","PrintRow","state","onClick","index","cursor","props","data","yPos","withinBounds","list","setLineStyle","listItem","lineStyle","activeLine","rowStyle","print","text","textBeforeCursor","slice","xPos","cursorAt","textAfterCursor","substring","ifInactiveRow","getInsertRow","insertMarker","backgroundColor","commandMarker","insertAfter","getNonInsertRow","length","position","display","width","height","top","item","insertMode","render","map"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\n\nimport {styles} from './style/main';\nimport Tags1 from './tags/tags1'\nimport Tags2 from './tags/tags2';\nimport Cursor from './cursor/_index';\n\nclass PrintRow extends Component {\n  state = {  }\n\n  onClick = (index)=>{\n    let cursor = this.props.data.cursor;\n    cursor.yPos = index;\n    cursor = Cursor.withinBounds( this.props.data.list, cursor);\n    this.props.onClick( cursor );\n  }\n\n  setLineStyle= (index, listItem, props )=> {\n    return ( index=== this.props.data.cursor.yPos ? \n      {...styles.lineStyle, ...styles.activeLine, ...listItem.rowStyle } : \n      {...styles.lineStyle, ...listItem.rowStyle });\n  }\n\n  print = (listItem, index)=>{\n    let text = listItem.text;\n    const {cursor} = this.props.data;\n\n    const textBeforeCursor = text.slice(0, cursor.xPos);\n    const cursorAt = text.slice( cursor.xPos, cursor.xPos + 1);\n    const textAfterCursor = text.substring( cursor.xPos + 1);\n    \n    const ifInactiveRow = ()=> { \n      return index !== cursor.yPos\n    };\n\n\n    const getInsertRow = ()=>{ \n      let insertMarker = ( listItem.rowStyle.backgroundColor !== 'black' ) ? {} : {...styles.commandMarker, ...{backgroundColor: 'white'}}\n      return(\n        <span>\n            <span>{textBeforeCursor}</span>\n            {!cursor.insertAfter && <span style={{ ...styles.insertMarker, ...insertMarker }}></span> }\n            <span>{cursorAt}</span>\n            {cursor.insertAfter && <span style={{ ...styles.insertMarker, ...insertMarker }}></span> }\n            <span>{textAfterCursor}</span>\n        </span>)\n    }\n\n    const getNonInsertRow = ()=>{ \n      if( !listItem.rowStyle ) return null;\n\n      let commandMarker = ( listItem.rowStyle.backgroundColor !== 'green' ) ? {...styles.commandMarker} : {...styles.commandMarker, ...{backgroundColor: 'white'}}\n      return(\n        <span>\n          <span>{textBeforeCursor}</span>\n          { listItem.text.length === 0 && <span style={{ ...commandMarker, ...{position: 'relative', display: 'inline-block', width: 4, height: 13, top: 3 } }}></span> }\n          { listItem.text.length !== 0 && <span style={{ ...commandMarker }}>{text.slice(cursor.xPos, cursor.xPos + 1)}</span> }\n          <span>{text.slice(cursor.xPos + 1, cursor.xPos + 1)}</span>\n          <span>{text.slice(cursor.xPos + 1, text.length)}</span>\n        </span>)\n    }\n\n    return(\n      <div style={{...this.setLineStyle(index, listItem) }} >\n        {/* <RowStyle data={{index, listItem, cursor}}> */}\n        <span style={ styles.item } onClick={ ()=>this.onClick(index)} >\n          <div style={{...styles.rowStyle }} >\n            <Tags1 data={listItem} />\n            {ifInactiveRow() && <span>{text}</span>}\n            {!ifInactiveRow() && cursor.insertMode && getInsertRow() }\n            {!ifInactiveRow() && !cursor.insertMode && getNonInsertRow() }\n            <Tags2 fullString={listItem} />\n            {/* <Tags1 data={listItem} />\n            <Tags2 fullString={listItem} /> */}\n          </div>\n        </span>\n        {/* </RowStyle> */}\n      </div>\n    )\n\n  }\n\n  render() { \n    return(\n      <React.Fragment>\n        {this.props.data.list.map( (listItem, index)=>{ return(\n          <div key={index}> { this.print(listItem, index) } </div>\n        )})}\n      </React.Fragment>\n    )\n  }\n}\n \nexport default PrintRow;"]},"metadata":{},"sourceType":"module"}