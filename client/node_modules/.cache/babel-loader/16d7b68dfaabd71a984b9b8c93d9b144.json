{"ast":null,"code":"import _objectSpread from \"/Users/Kim/Desktop/todolist5/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/Kim/Desktop/todolist5/client/src/components/windows/popups/rowWindow.jsx\";\nimport React, { Component } from 'react';\n\nclass RowWindow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.handleChange = e => {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.styles = {\n      container: {\n        position: 'fixed',\n        display: 'block',\n        top: '20vh',\n        width: '50vw',\n        paddingLeft: 30,\n        paddingBottom: 30,\n        border: '1px solid black',\n        borderRadius: 5,\n        color: 'white',\n        marginLeft: '25vw',\n        backgroundColor: '#1a202c',\n        boxShadow: '2px 2px 2px black'\n      },\n      text: {\n        display: 'inline-block',\n        width: 150\n      },\n      row: {\n        marginBottom: 5\n      },\n      header: {\n        textAlign: 'center'\n      }\n    };\n    this.state = {\n      backgroundColor: '',\n      color: '',\n      textAlign: '',\n      fontSize: ''\n    };\n    this.keyDown = this.keyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.keyDown = this.keyDown.bind(this);\n  }\n\n  handleSubmit(event) {}\n\n  componentDidMount() {\n    this.nameInput.focus();\n\n    const _ref = this.props.data ? this.props.data : {},\n          style = _ref.rowStyle;\n\n    this.setState({\n      backgroundColor: style.backgroundColor ? style.backgroundColor : '',\n      fontSize: style.fontSize ? style.fontSize : '',\n      textAlign: style.textAlign ? style.textAlign : '',\n      color: style.color ? style.color : ''\n    });\n  }\n\n  keyDown(e) {\n    if (e.key !== 'Enter') return;\n\n    let rowStyle = _objectSpread({}, this.state);\n\n    rowStyle.fontSize = rowStyle.fontSize > 0 ? parseInt(rowStyle.fontSize) : '';\n    const displayRowWindow = false;\n    const listItem = this.props.data;\n    listItem.rowStyle = _objectSpread({}, listItem.rowStyle, {}, rowStyle);\n    this.props.onClose(listItem, displayRowWindow);\n  }\n\n  render() {\n    console.log(this.props.data);\n\n    const renderInput = name => React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state[name],\n      onKeyDown: this.keyDown,\n      name: name,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    });\n\n    const renderInputText = text => React.createElement(\"span\", {\n      style: this.styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, text);\n\n    const hotkey = char => React.createElement(\"span\", {\n      style: {\n        color: 'red',\n        display: 'inline-block',\n        width: '25px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"[\", char, \"] \");\n\n    return React.createElement(\"div\", {\n      style: this.styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: this.styles.header,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Set row style\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, hotkey('a'), renderInputText('background color'), React.createElement(\"input\", {\n      value: this.state['backgroundColor'],\n      onKeyDown: this.keyDown,\n      onChange: this.handleChange,\n      name: 'backgroundColor',\n      type: \"text\",\n      ref: input => this.nameInput = input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, hotkey('b'), renderInputText('Color'), renderInput('color')), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, hotkey('c'), renderInputText('Size'), renderInput('fontSize')), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, hotkey('d'), renderInputText('Align'), renderInput('textAlign')), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, hotkey('q'), renderInputText('Custome style')), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, hotkey('e'), renderInputText('Default row style')));\n  }\n\n}\n\nexport default RowWindow;","map":{"version":3,"sources":["/Users/Kim/Desktop/todolist5/client/src/components/windows/popups/rowWindow.jsx"],"names":["React","Component","RowWindow","constructor","props","state","handleChange","e","target","name","value","setState","styles","container","position","display","top","width","paddingLeft","paddingBottom","border","borderRadius","color","marginLeft","backgroundColor","boxShadow","text","row","marginBottom","header","textAlign","fontSize","keyDown","bind","handleSubmit","event","componentDidMount","nameInput","focus","data","style","rowStyle","key","parseInt","displayRowWindow","listItem","onClose","render","console","log","renderInput","renderInputText","hotkey","char","input"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\n\nclass RowWindow extends Component {\n  state = {}\n\n  constructor(props){\n    super(props);\n    this.state = {backgroundColor: '', color: '', textAlign: '', fontSize: '' }\n    this.keyDown = this.keyDown.bind(this);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.keyDown = this.keyDown.bind(this);\n  }\n\n  handleChange = (e)=>{\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSubmit(event){\n  }\n\n  componentDidMount(){\n    this.nameInput.focus();\n\n    const {rowStyle: style} = this.props.data ? this.props.data : {};\n    this.setState({\n      backgroundColor: style.backgroundColor ? style.backgroundColor : '',\n      fontSize: style.fontSize ? style.fontSize : '',\n      textAlign: style.textAlign ? style.textAlign : '',\n      color: style.color ? style.color : '',\n    })\n  }\n\n  keyDown(e){\n    if( e.key !== 'Enter') return;\n    let rowStyle = {...this.state}\n    rowStyle.fontSize = rowStyle.fontSize > 0 ? parseInt( rowStyle.fontSize ) : '';\n\n    const displayRowWindow = false;\n    const listItem = this.props.data;\n    listItem.rowStyle = {...listItem.rowStyle, ...rowStyle};\n\n    this.props.onClose( listItem, displayRowWindow );\n  }\n\n  render() { \n    console.log( this.props.data);\n    const renderInput = name => <input type='text' value={this.state[name]} onKeyDown={this.keyDown} name={name} onChange={ this.handleChange } />\n    const renderInputText = text=> <span style={ this.styles.text}>{text}</span>\n    const hotkey = char => <span style={{color: 'red', display: 'inline-block', width: '25px'}}>[{char}] </span>\n\n    return (\n      <div style={this.styles.container}>\n        <h1 style={this.styles.header}>Set row style</h1>\n        {/* <input type=\"text\" ref={(input) => this.nameInput = input } name=\"blaa\" id=\"\"/> */}\n        <div>\n          {hotkey('a')}\n          {renderInputText('background color')}\n          <input \n            value={this.state['backgroundColor']}\n            onKeyDown={this.keyDown}\n            onChange={this.handleChange}\n            name={'backgroundColor'}\n            type=\"text\"\n            ref={(input) => this.nameInput = input }\n          />\n          {/* {renderInput('backgroundColor') } */}\n        </div>\n        <div>\n          {hotkey('b')}\n          {renderInputText('Color')}\n          {renderInput('color') }\n        </div>\n        <div>\n          {hotkey('c')}\n          {renderInputText('Size')}\n          {renderInput('fontSize') }\n        </div>\n        <div>\n          {hotkey('d')}\n          {renderInputText('Align')}\n          {renderInput('textAlign') }\n        </div>\n        <div>\n          {hotkey('q')}\n          {renderInputText('Custome style')}\n        </div>\n        <div>\n          {hotkey('e')}\n          {renderInputText('Default row style')}\n        </div>\n      </div>\n    );\n  }\n  styles = {\n    container: {\n      position: 'fixed',\n      display: 'block',\n      top: '20vh',\n      width: '50vw',\n      paddingLeft: 30,\n      paddingBottom: 30,\n      border: '1px solid black',\n      borderRadius: 5,\n      color: 'white',\n      marginLeft: '25vw',\n      backgroundColor: '#1a202c',\n      boxShadow: '2px 2px 2px black',\n    },\n\n    text: {\n      display: 'inline-block',\n      width: 150,\n    },\n\n    row: {\n      marginBottom: 5,\n    },\n\n    header: {\n      textAlign: 'center',\n    }\n  }\n}\n \nexport default RowWindow;"]},"metadata":{},"sourceType":"module"}