{"ast":null,"code":"// import tag from '../../util/tag';\n// import tag from '../util/tag';\nexport function endOfPrevWord(list, cursor) {\n  cursor.savePos = -1;\n  let text = list[cursor.yPos].text; //get the str before the coursor and reverse it\n\n  let sub = text.substring(0, cursor.xPos);\n  sub = sub.split(\"\").reverse().join('');\n  let index = sub.indexOf(\" \");\n  if (index < 0 && cursor.yPos === 0) return cursor;\n  if (index < 0 && cursor.yPos !== 0) cursor.yPos -= 1; //if no match go up one line on the last character\n\n  if (index < 0) {\n    const lineLength = list[cursor.yPos].text.length;\n    cursor.xPos = lineLength === 0 ? 0 : lineLength - 1;\n    return cursor;\n  }\n\n  cursor.xPos -= index + 2;\n  return cursor;\n}\nexport default {\n  endOfPrevWord\n};","map":{"version":3,"sources":["/Users/Kim/Desktop/todolist/client/src/components/cursor/endOfPrevWord.js"],"names":["endOfPrevWord","list","cursor","savePos","text","yPos","sub","substring","xPos","split","reverse","join","index","indexOf","lineLength","length"],"mappings":"AAAA;AACA;AAEA,OAAO,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAoC;AACzCA,EAAAA,MAAM,CAACC,OAAP,GAAiB,CAAC,CAAlB;AADyC,MAEpCC,IAFoC,GAE5BH,IAAI,CAACC,MAAM,CAACG,IAAR,CAFwB,CAEpCD,IAFoC,EAIzC;;AACA,MAAIE,GAAG,GAAGF,IAAI,CAACG,SAAL,CAAgB,CAAhB,EAAmBL,MAAM,CAACM,IAA1B,CAAV;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACG,KAAJ,CAAU,EAAV,EAAcC,OAAd,GAAwBC,IAAxB,CAA6B,EAA7B,CAAN;AAEA,MAAIC,KAAK,GAAGN,GAAG,CAACO,OAAJ,CAAY,GAAZ,CAAZ;AAEA,MAAID,KAAK,GAAG,CAAR,IAAaV,MAAM,CAACG,IAAP,KAAgB,CAAjC,EAAoC,OAAOH,MAAP;AACpC,MAAIU,KAAK,GAAG,CAAR,IAAaV,MAAM,CAACG,IAAP,KAAgB,CAAjC,EAAoCH,MAAM,CAACG,IAAP,IAAe,CAAf,CAXK,CAazC;;AACA,MAAIO,KAAK,GAAG,CAAZ,EAAe;AACb,UAAME,UAAU,GAAGb,IAAI,CAACC,MAAM,CAACG,IAAR,CAAJ,CAAkBD,IAAlB,CAAuBW,MAA1C;AACAb,IAAAA,MAAM,CAACM,IAAP,GAAcM,UAAU,KAAK,CAAf,GAAmB,CAAnB,GAAuBA,UAAU,GAAG,CAAlD;AACA,WAAOZ,MAAP;AACD;;AAEDA,EAAAA,MAAM,CAACM,IAAP,IAAgBI,KAAK,GAAG,CAAxB;AACA,SAAOV,MAAP;AACD;AAED,eAAe;AACbF,EAAAA;AADa,CAAf","sourcesContent":["// import tag from '../../util/tag';\n// import tag from '../util/tag';\n\nexport function endOfPrevWord(list, cursor){\n  cursor.savePos = -1;\n  let {text} = list[cursor.yPos];\n\n  //get the str before the coursor and reverse it\n  let sub = text.substring( 0, cursor.xPos );\n  sub = sub.split(\"\").reverse().join('');\n\n  let index = sub.indexOf(\" \");\n\n  if( index < 0 && cursor.yPos === 0) return cursor;\n  if( index < 0 && cursor.yPos !== 0) cursor.yPos -= 1;\n\n  //if no match go up one line on the last character\n  if( index < 0 ){\n    const lineLength = list[cursor.yPos].text.length;\n    cursor.xPos = lineLength === 0 ? 0 : lineLength - 1;\n    return cursor;\n  }\n\n  cursor.xPos -= (index + 2);\n  return cursor;\n}\n\nexport default {\n  endOfPrevWord,\n}"]},"metadata":{},"sourceType":"module"}