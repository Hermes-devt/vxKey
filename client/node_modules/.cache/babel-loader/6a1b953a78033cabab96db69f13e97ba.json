{"ast":null,"code":"import _objectSpread from \"/Users/Kim/Desktop/todolist5/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport Cursor from '../cursor/_index';\nimport Line from './_index';\nexport function getDefaultEmptyLine(left = 5) {\n  let row = {\n    text: '',\n    rowStyle: {\n      paddingLeft: left\n    }\n  };\n  return row;\n}\nexport function insertNewLine(list, cursor) {\n  let style = list[cursor.yPos].rowStyle.paddingLeft;\n  let text = list[cursor.yPos].text;\n  let row = getDefaultEmptyLine(style);\n  list.splice(cursor.yPos + 1, 0, row);\n  cursor = Cursor.down(list, cursor);\n\n  if (text.length > 0 && text[text.length - 1] === ':') {\n    list[cursor.yPos - 1].rowStyle = _objectSpread({}, list[cursor.yPos].rowStyle, {}, {\n      backgroundColor: 'black',\n      color: 'white'\n    });\n\n    const _Line$shiftRight = Line.shiftRight(list[cursor.yPos], cursor),\n          listItem = _Line$shiftRight.listItem,\n          cursor2 = _Line$shiftRight.cursor;\n\n    list[cursor.yPos] = listItem;\n    cursor = cursor2;\n  }\n\n  return {\n    list,\n    cursor\n  };\n}\nexport function insertNewLineAbove(list, cursor) {\n  let style = list[cursor.yPos].rowStyle.paddingLeft;\n  let row = getDefaultEmptyLine(style);\n  list.splice(cursor.yPos, 0, row);\n  return {\n    list,\n    cursor\n  };\n}\nexport function insertionEnter(listItems, cursor) {\n  listItems[cursor.yPos].rowStyle.paddingLeft = listItems[cursor.yPos].rowStyle.paddingLeft;\n  let text = listItems[cursor.yPos].text;\n  let sub = text.substring(!cursor.insertAfter ? cursor.xPos : cursor.xPos + 1); // Allows the user to split the line in 2 if it has text after the cursor\n\n  let before = text.substring(0, cursor.xPos);\n  let after = text.substring(sub.length + cursor.xPos, text.length);\n\n  let _insertNewLine = insertNewLine(listItems, cursor),\n      list = _insertNewLine.list,\n      cursor1 = _insertNewLine.cursor;\n\n  cursor = cursor1;\n  list[cursor.yPos].text = \"\" + sub;\n  list[cursor.yPos - 1].text = before + after;\n  return {\n    cursor,\n    list\n  };\n}\nexport default {\n  insertNewLine,\n  insertionEnter,\n  insertNewLineAbove\n};","map":{"version":3,"sources":["/Users/Kim/Desktop/todolist5/client/src/components/todo/line/newRow.js"],"names":["Cursor","Line","getDefaultEmptyLine","left","row","text","rowStyle","paddingLeft","insertNewLine","list","cursor","style","yPos","splice","down","length","backgroundColor","color","shiftRight","listItem","cursor2","insertNewLineAbove","insertionEnter","listItems","sub","substring","insertAfter","xPos","before","after","cursor1"],"mappings":"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","sourcesContent":["\nimport Cursor from '../cursor/_index'\nimport Line from './_index';\n\nexport function getDefaultEmptyLine(left = 5){\n  let row = { text: '', rowStyle: { paddingLeft: left} };\n  return row;\n}\n\nexport function insertNewLine(list, cursor){\n\n  let style = list[cursor.yPos].rowStyle.paddingLeft;\n  let text = list[cursor.yPos].text;\n\n  let row = getDefaultEmptyLine(style);\n  list.splice( cursor.yPos + 1, 0, row);\n  cursor = Cursor.down(list, cursor)\n\n  if( text.length > 0 && text[text.length-1] === ':'){\n    list[cursor.yPos - 1].rowStyle = {...list[cursor.yPos].rowStyle, ...{backgroundColor: 'black', color: 'white'}};\n    const {listItem, cursor:cursor2} = Line.shiftRight( list[cursor.yPos], cursor);\n    list[cursor.yPos] = listItem; cursor = cursor2;\n  }\n  return { list, cursor }\n}\n\nexport function insertNewLineAbove(list, cursor){\n  let style = list[cursor.yPos].rowStyle.paddingLeft;\n  let row = getDefaultEmptyLine(style);\n  list.splice( cursor.yPos, 0, row);\n  return {list, cursor} \n}\n\nexport function insertionEnter(listItems, cursor){\n  listItems[cursor.yPos].rowStyle.paddingLeft = listItems[cursor.yPos].rowStyle.paddingLeft;\n  let {text} = listItems[cursor.yPos];\n  let sub = text.substring( !cursor.insertAfter ? cursor.xPos : cursor.xPos + 1);\n\n  // Allows the user to split the line in 2 if it has text after the cursor\n  let before = text.substring(0, cursor.xPos )\n  let after = text.substring( sub.length + cursor.xPos, text.length );\n\n  let {list, cursor:cursor1} = insertNewLine( listItems, cursor );\n  cursor = cursor1;\n\n  list[cursor.yPos].text = \"\" + sub;\n  list[cursor.yPos - 1].text = before + after;\n\n  return {cursor, list}\n}\n\nexport default {\n  insertNewLine,\n  insertionEnter,\n  insertNewLineAbove\n}"]},"metadata":{},"sourceType":"module"}