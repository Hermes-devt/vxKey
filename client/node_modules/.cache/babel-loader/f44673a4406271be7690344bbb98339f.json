{"ast":null,"code":"import Line from '../line/_index';\nimport { deleteRow } from '../commands/deleteRow';\n\nfunction insertAfterMode(list, cursor) {\n  let text = list[cursor.yPos].text;\n  let listItem = list[cursor.yPos];\n\n  if (text.length <= 0) {\n    if (listItem.rowStyle.paddingLeft <= 5 && cursor.yPos > 0) {\n      let _deleteRow = deleteRow(list, cursor),\n          list2 = _deleteRow.list,\n          cursor2 = _deleteRow.cursor;\n\n      cursor = cursor2;\n      list = list2;\n      if (!(list.length - 1 === cursor.yPos)) cursor.yPos -= 1;\n      cursor.xPos = list[cursor.yPos].text.length - 1;\n    } else {\n      let _Line$shiftLeft = Line.shiftLeft(listItem, cursor),\n          listItem2 = _Line$shiftLeft.listItem,\n          cursor2 = _Line$shiftLeft.cursor;\n\n      list[cursor.yPos] = listItem2;\n      cursor = cursor2;\n      cursor.insertAfter = true;\n    }\n\n    return {\n      list,\n      cursor\n    };\n  }\n\n  if (cursor.xPos === 0 && text.length - 1 === 0) {\n    list[cursor.yPos].text = text.slice(0, cursor.xPos) + text.slice(cursor.xPos + 1);\n    cursor.xPos = 0;\n    cursor.insertAfter = true;\n    return {\n      list,\n      cursor\n    };\n  }\n\n  if (cursor.xPos === 0) {\n    list[cursor.yPos] = text.substring(1);\n    cursor.insertAfter = false;\n    return {\n      list,\n      cursor\n    };\n  }\n\n  list[cursor.yPos].text = text.slice(0, cursor.xPos) + text.slice(cursor.xPos + 1);\n  cursor.xPos -= 1;\n  return {\n    list,\n    cursor\n  };\n}\n\nfunction insertBeforeMode(list, cursor) {\n  let text = list[cursor.yPos].text;\n  let listItem = list[cursor.yPos];\n\n  if (cursor.xPos === 0) {\n    let _Line$shiftLeft2 = Line.shiftLeft(listItem, cursor),\n        listItem2 = _Line$shiftLeft2.listItem,\n        cursor2 = _Line$shiftLeft2.cursor;\n\n    list[cursor.yPos] = listItem2;\n    cursor = cursor2;\n    cursor.insertAfter = false;\n    return {\n      list,\n      cursor\n    };\n  }\n\n  if (cursor.xPos === text.length - 1) {\n    list[cursor.yPos].text = text.slice(0, cursor.xPos - 1) + text.slice(cursor.xPos);\n    cursor.xPos -= 1;\n    return {\n      list,\n      cursor\n    };\n  }\n\n  list[cursor.yPos].text = text.slice(0, cursor.xPos - 1) + text.slice(cursor.xPos);\n  cursor.xPos -= 1;\n  return {\n    list,\n    cursor\n  };\n}\n\nexport function Backspace(list, cursor) {\n  if (cursor.insertAfter) return insertAfterMode(list, cursor);else return insertBeforeMode(list, cursor);\n}\nexport default {\n  Backspace\n};","map":{"version":3,"sources":["/Users/Kim/Desktop/todolist5/client/src/components/commands/backspace.js"],"names":["Line","deleteRow","insertAfterMode","list","cursor","text","yPos","listItem","length","rowStyle","paddingLeft","list2","cursor2","xPos","shiftLeft","listItem2","insertAfter","slice","substring","insertBeforeMode","Backspace"],"mappings":"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","sourcesContent":["\nimport Line from '../line/_index';\nimport {deleteRow} from '../commands/deleteRow';\n\nfunction insertAfterMode(list, cursor){\n  let {text} = list[cursor.yPos];\n  let listItem = list[cursor.yPos];\n\n\n  if( text.length <= 0){\n    if( listItem.rowStyle.paddingLeft <= 5 && cursor.yPos > 0){\n        let {list: list2, cursor: cursor2} = deleteRow(list, cursor);\n        cursor = cursor2;\n        list = list2;\n        if( !(list.length-1 === cursor.yPos))\n          cursor.yPos -= 1;\n        cursor.xPos = list[cursor.yPos].text.length - 1;\n    }else{\n      let {listItem:listItem2, cursor:cursor2} = Line.shiftLeft( listItem, cursor);\n      list[cursor.yPos] = listItem2;\n      cursor = cursor2;\n      cursor.insertAfter = true;\n    }\n    return {list, cursor}\n  }\n\n  if( cursor.xPos === 0 && text.length - 1 === 0){\n    list[cursor.yPos].text = text.slice(0, cursor.xPos) + text.slice(cursor.xPos + 1 );\n    cursor.xPos = 0;\n    cursor.insertAfter = true;\n    return {list, cursor}\n  }\n\n  if( cursor.xPos === 0 ){\n    list[cursor.yPos] = text.substring(1);\n    cursor.insertAfter = false;\n    return {list, cursor}\n  }\n\n  list[cursor.yPos].text = text.slice(0, cursor.xPos) + text.slice(cursor.xPos + 1 );\n  cursor.xPos -= 1;\n  return {list, cursor};\n}\n\nfunction insertBeforeMode(list, cursor){\n  let {text} = list[cursor.yPos];\n  let listItem = list[cursor.yPos];\n\n  if( cursor.xPos === 0 ){\n    let {listItem:listItem2, cursor:cursor2} = Line.shiftLeft(listItem, cursor);\n    list[cursor.yPos] = listItem2;\n    cursor = cursor2;\n    cursor.insertAfter = false;\n    return {list, cursor}\n  }\n\n  if( cursor.xPos === text.length -1 ){\n    list[cursor.yPos].text = text.slice(0, cursor.xPos -1 ) + text.slice(cursor.xPos);\n    cursor.xPos -= 1;\n    return {list, cursor}\n  }\n\n  list[cursor.yPos].text = text.slice(0, cursor.xPos - 1) + text.slice(cursor.xPos );\n  cursor.xPos -= 1;\n  return {list, cursor};\n}\n\nexport function Backspace(list, cursor,){\n  if( cursor.insertAfter) return insertAfterMode(list, cursor);\n  else                    return insertBeforeMode(list, cursor);\n}\n\nexport default {\n  Backspace,\n}"]},"metadata":{},"sourceType":"module"}