{"ast":null,"code":"import _objectSpread from \"/Users/Kim/Desktop/todolist5/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nexport function jumpToNextMatch(list, match, cursor) {\n  cursor.savePos = -1;\n  match = match.substring(1);\n\n  let oldCursor = _objectSpread({}, cursor); //find if match on the current row behind in front of the cursor.\n\n\n  let currentRow = list[cursor.yPos].text;\n  let afterCursor = currentRow.substring(cursor.xPos, currentRow.length - 1);\n  let find = afterCursor.indexOf(match);\n\n  if (find > 0) {\n    cursor.xPos = find + currentRow.substring(0, cursor.xPos).length;\n    return cursor;\n  }\n\n  for (let listIndex = cursor.yPos + 1; listIndex < list.length; listIndex++) {\n    let text = list[listIndex].text.toLowerCase();\n    let find = text.indexOf(match);\n\n    if (find >= 0) {\n      cursor.xPos = find;\n      cursor.yPos = listIndex;\n      return cursor;\n    }\n  }\n\n  return oldCursor;\n}\nexport default {\n  jumpToNextMatch\n};","map":{"version":3,"sources":["/Users/Kim/Desktop/todolist5/client/src/components/cursor/jumpToNextMatch.js"],"names":["jumpToNextMatch","list","match","cursor","savePos","substring","oldCursor","currentRow","yPos","text","afterCursor","xPos","length","find","indexOf","listIndex","toLowerCase"],"mappings":";AACA,OAAO,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,MAAtC,EAA6C;AAClDA,EAAAA,MAAM,CAACC,OAAP,GAAiB,CAAC,CAAlB;AACAF,EAAAA,KAAK,GAAGA,KAAK,CAACG,SAAN,CAAgB,CAAhB,CAAR;;AACA,MAAIC,SAAS,qBAAOH,MAAP,CAAb,CAHkD,CAKlD;;;AACA,MAAII,UAAU,GAAGN,IAAI,CAACE,MAAM,CAACK,IAAR,CAAJ,CAAkBC,IAAnC;AACA,MAAIC,WAAW,GAAGH,UAAU,CAACF,SAAX,CAAqBF,MAAM,CAACQ,IAA5B,EAAkCJ,UAAU,CAACK,MAAX,GAAoB,CAAtD,CAAlB;AACA,MAAIC,IAAI,GAAGH,WAAW,CAACI,OAAZ,CAAqBZ,KAArB,CAAX;;AAEA,MAAIW,IAAI,GAAG,CAAX,EAAc;AACZV,IAAAA,MAAM,CAACQ,IAAP,GAAcE,IAAI,GAAGN,UAAU,CAACF,SAAX,CAAqB,CAArB,EAAwBF,MAAM,CAACQ,IAA/B,EAAqCC,MAA1D;AACA,WAAOT,MAAP;AACD;;AAED,OAAK,IAAIY,SAAS,GAACZ,MAAM,CAACK,IAAP,GAAc,CAAjC,EAAoCO,SAAS,GAAGd,IAAI,CAACW,MAArD,EAA6DG,SAAS,EAAtE,EAAyE;AACvE,QAAIN,IAAI,GAAGR,IAAI,CAACc,SAAD,CAAJ,CAAgBN,IAAhB,CAAqBO,WAArB,EAAX;AACA,QAAIH,IAAI,GAAGJ,IAAI,CAACK,OAAL,CAAcZ,KAAd,CAAX;;AACA,QAAIW,IAAI,IAAI,CAAZ,EAAe;AACbV,MAAAA,MAAM,CAACQ,IAAP,GAAcE,IAAd;AACAV,MAAAA,MAAM,CAACK,IAAP,GAAcO,SAAd;AACA,aAAOZ,MAAP;AACD;AACF;;AACD,SAAOG,SAAP;AACD;AAED,eAAe;AACbN,EAAAA;AADa,CAAf","sourcesContent":["\nexport function jumpToNextMatch(list, match, cursor){\n  cursor.savePos = -1;\n  match = match.substring(1);\n  let oldCursor = {...cursor};\n\n  //find if match on the current row behind in front of the cursor.\n  let currentRow = list[cursor.yPos].text;\n  let afterCursor = currentRow.substring(cursor.xPos, currentRow.length - 1 );\n  let find = afterCursor.indexOf( match );\n  \n  if( find > 0 ){\n    cursor.xPos = find + currentRow.substring(0, cursor.xPos).length;\n    return cursor;\n  }\n\n  for( let listIndex=cursor.yPos + 1; listIndex < list.length; listIndex++){\n    let text = list[listIndex].text.toLowerCase();\n    let find = text.indexOf( match );\n    if( find >= 0 ){\n      cursor.xPos = find;\n      cursor.yPos = listIndex;\n      return cursor;\n    }\n  }\n  return oldCursor;\n}\n\nexport default {\n  jumpToNextMatch\n}\n"]},"metadata":{},"sourceType":"module"}